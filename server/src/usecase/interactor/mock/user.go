// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package interactor is a generated GoMock package.
package interactor

import (
	context "context"
	entity "portfolioGo/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInputPort is a mock of UserInputPort interface.
type MockUserInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserInputPortMockRecorder
}

// MockUserInputPortMockRecorder is the mock recorder for MockUserInputPort.
type MockUserInputPortMockRecorder struct {
	mock *MockUserInputPort
}

// NewMockUserInputPort creates a new mock instance.
func NewMockUserInputPort(ctrl *gomock.Controller) *MockUserInputPort {
	mock := &MockUserInputPort{ctrl: ctrl}
	mock.recorder = &MockUserInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInputPort) EXPECT() *MockUserInputPortMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockUserInputPort) CreatePost(authUser *entity.User, post *entity.Post) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", authUser, post)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockUserInputPortMockRecorder) CreatePost(authUser, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockUserInputPort)(nil).CreatePost), authUser, post)
}

// DeletePost mocks base method.
func (m *MockUserInputPort) DeletePost(authUser *entity.User, post *entity.Post) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", authUser, post)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockUserInputPortMockRecorder) DeletePost(authUser, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockUserInputPort)(nil).DeletePost), authUser, post)
}

// GetPost mocks base method.
func (m *MockUserInputPort) GetPost(authUser *entity.User) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", authUser)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockUserInputPortMockRecorder) GetPost(authUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockUserInputPort)(nil).GetPost), authUser)
}

// GetUserByEmail mocks base method.
func (m *MockUserInputPort) GetUserByEmail(email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserInputPortMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserInputPort)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockUserInputPort) GetUserById(c context.Context, userId int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", c, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserInputPortMockRecorder) GetUserById(c, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserInputPort)(nil).GetUserById), c, userId)
}

// GetUserPostByRecent mocks base method.
func (m *MockUserInputPort) GetUserPostByRecent() (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPostByRecent")
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPostByRecent indicates an expected call of GetUserPostByRecent.
func (mr *MockUserInputPortMockRecorder) GetUserPostByRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPostByRecent", reflect.TypeOf((*MockUserInputPort)(nil).GetUserPostByRecent))
}

// SignUp mocks base method.
func (m *MockUserInputPort) SignUp(request *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserInputPortMockRecorder) SignUp(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserInputPort)(nil).SignUp), request)
}

// UpdatePost mocks base method.
func (m *MockUserInputPort) UpdatePost(authUser *entity.User, post *entity.Post) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", authUser, post)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockUserInputPortMockRecorder) UpdatePost(authUser, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockUserInputPort)(nil).UpdatePost), authUser, post)
}

// UpdateUser mocks base method.
func (m *MockUserInputPort) UpdateUser(request, authUser *entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", request, authUser)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserInputPortMockRecorder) UpdateUser(request, authUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserInputPort)(nil).UpdateUser), request, authUser)
}

// Withdrawal mocks base method.
func (m *MockUserInputPort) Withdrawal(request *entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawal", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockUserInputPortMockRecorder) Withdrawal(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockUserInputPort)(nil).Withdrawal), request)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockUserRepository) CreatePost(post *entity.Post) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockUserRepositoryMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockUserRepository)(nil).CreatePost), post)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(request *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), request)
}

// DeletePost mocks base method.
func (m *MockUserRepository) DeletePost(authUser *entity.User, post *entity.Post) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", authUser, post)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockUserRepositoryMockRecorder) DeletePost(authUser, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockUserRepository)(nil).DeletePost), authUser, post)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(request *entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), request)
}

// InsertPost mocks base method.
func (m *MockUserRepository) InsertPost(authUser *entity.User) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPost", authUser)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPost indicates an expected call of InsertPost.
func (mr *MockUserRepositoryMockRecorder) InsertPost(authUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPost", reflect.TypeOf((*MockUserRepository)(nil).InsertPost), authUser)
}

// InsertUserByEmail mocks base method.
func (m *MockUserRepository) InsertUserByEmail(email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserByEmail", email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserByEmail indicates an expected call of InsertUserByEmail.
func (mr *MockUserRepositoryMockRecorder) InsertUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).InsertUserByEmail), email)
}

// InsertUserById mocks base method.
func (m *MockUserRepository) InsertUserById(userId int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserById", userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserById indicates an expected call of InsertUserById.
func (mr *MockUserRepositoryMockRecorder) InsertUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserById", reflect.TypeOf((*MockUserRepository)(nil).InsertUserById), userId)
}

// InsertUserPostByRecent mocks base method.
func (m *MockUserRepository) InsertUserPostByRecent() (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserPostByRecent")
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserPostByRecent indicates an expected call of InsertUserPostByRecent.
func (mr *MockUserRepositoryMockRecorder) InsertUserPostByRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserPostByRecent", reflect.TypeOf((*MockUserRepository)(nil).InsertUserPostByRecent))
}

// SoftDeletePost mocks base method.
func (m *MockUserRepository) SoftDeletePost(authUser *entity.User, post *entity.Post) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeletePost", authUser, post)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftDeletePost indicates an expected call of SoftDeletePost.
func (mr *MockUserRepositoryMockRecorder) SoftDeletePost(authUser, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeletePost", reflect.TypeOf((*MockUserRepository)(nil).SoftDeletePost), authUser, post)
}
