// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TechnicalStack is an object representing the database table.
type TechnicalStack struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID     int         `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	TechnicalName null.String `boil:"technical_name" json:"technical_name,omitempty" toml:"technical_name" yaml:"technical_name,omitempty"`
	TechnicalType null.String `boil:"technical_type" json:"technical_type,omitempty" toml:"technical_type" yaml:"technical_type,omitempty"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt     null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *technicalStackR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L technicalStackL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TechnicalStackColumns = struct {
	ID            string
	ProductID     string
	TechnicalName string
	TechnicalType string
	UpdatedAt     string
	CreatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	ProductID:     "product_id",
	TechnicalName: "technical_name",
	TechnicalType: "technical_type",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
	DeletedAt:     "deleted_at",
}

var TechnicalStackTableColumns = struct {
	ID            string
	ProductID     string
	TechnicalName string
	TechnicalType string
	UpdatedAt     string
	CreatedAt     string
	DeletedAt     string
}{
	ID:            "technical_stacks.id",
	ProductID:     "technical_stacks.product_id",
	TechnicalName: "technical_stacks.technical_name",
	TechnicalType: "technical_stacks.technical_type",
	UpdatedAt:     "technical_stacks.updated_at",
	CreatedAt:     "technical_stacks.created_at",
	DeletedAt:     "technical_stacks.deleted_at",
}

// Generated where

var TechnicalStackWhere = struct {
	ID            whereHelperint
	ProductID     whereHelperint
	TechnicalName whereHelpernull_String
	TechnicalType whereHelpernull_String
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperint{field: "\"technical_stacks\".\"id\""},
	ProductID:     whereHelperint{field: "\"technical_stacks\".\"product_id\""},
	TechnicalName: whereHelpernull_String{field: "\"technical_stacks\".\"technical_name\""},
	TechnicalType: whereHelpernull_String{field: "\"technical_stacks\".\"technical_type\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"technical_stacks\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"technical_stacks\".\"created_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"technical_stacks\".\"deleted_at\""},
}

// TechnicalStackRels is where relationship names are stored.
var TechnicalStackRels = struct {
	Product string
}{
	Product: "Product",
}

// technicalStackR is where relationships are stored.
type technicalStackR struct {
	Product *Product `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*technicalStackR) NewStruct() *technicalStackR {
	return &technicalStackR{}
}

func (r *technicalStackR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

// technicalStackL is where Load methods for each relationship are stored.
type technicalStackL struct{}

var (
	technicalStackAllColumns            = []string{"id", "product_id", "technical_name", "technical_type", "updated_at", "created_at", "deleted_at"}
	technicalStackColumnsWithoutDefault = []string{"product_id"}
	technicalStackColumnsWithDefault    = []string{"id", "technical_name", "technical_type", "updated_at", "created_at", "deleted_at"}
	technicalStackPrimaryKeyColumns     = []string{"id"}
	technicalStackGeneratedColumns      = []string{}
)

type (
	// TechnicalStackSlice is an alias for a slice of pointers to TechnicalStack.
	// This should almost always be used instead of []TechnicalStack.
	TechnicalStackSlice []*TechnicalStack
	// TechnicalStackHook is the signature for custom TechnicalStack hook methods
	TechnicalStackHook func(context.Context, boil.ContextExecutor, *TechnicalStack) error

	technicalStackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	technicalStackType                 = reflect.TypeOf(&TechnicalStack{})
	technicalStackMapping              = queries.MakeStructMapping(technicalStackType)
	technicalStackPrimaryKeyMapping, _ = queries.BindMapping(technicalStackType, technicalStackMapping, technicalStackPrimaryKeyColumns)
	technicalStackInsertCacheMut       sync.RWMutex
	technicalStackInsertCache          = make(map[string]insertCache)
	technicalStackUpdateCacheMut       sync.RWMutex
	technicalStackUpdateCache          = make(map[string]updateCache)
	technicalStackUpsertCacheMut       sync.RWMutex
	technicalStackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var technicalStackAfterSelectHooks []TechnicalStackHook

var technicalStackBeforeInsertHooks []TechnicalStackHook
var technicalStackAfterInsertHooks []TechnicalStackHook

var technicalStackBeforeUpdateHooks []TechnicalStackHook
var technicalStackAfterUpdateHooks []TechnicalStackHook

var technicalStackBeforeDeleteHooks []TechnicalStackHook
var technicalStackAfterDeleteHooks []TechnicalStackHook

var technicalStackBeforeUpsertHooks []TechnicalStackHook
var technicalStackAfterUpsertHooks []TechnicalStackHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TechnicalStack) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TechnicalStack) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TechnicalStack) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TechnicalStack) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TechnicalStack) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TechnicalStack) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TechnicalStack) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TechnicalStack) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TechnicalStack) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range technicalStackAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTechnicalStackHook registers your hook function for all future operations.
func AddTechnicalStackHook(hookPoint boil.HookPoint, technicalStackHook TechnicalStackHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		technicalStackAfterSelectHooks = append(technicalStackAfterSelectHooks, technicalStackHook)
	case boil.BeforeInsertHook:
		technicalStackBeforeInsertHooks = append(technicalStackBeforeInsertHooks, technicalStackHook)
	case boil.AfterInsertHook:
		technicalStackAfterInsertHooks = append(technicalStackAfterInsertHooks, technicalStackHook)
	case boil.BeforeUpdateHook:
		technicalStackBeforeUpdateHooks = append(technicalStackBeforeUpdateHooks, technicalStackHook)
	case boil.AfterUpdateHook:
		technicalStackAfterUpdateHooks = append(technicalStackAfterUpdateHooks, technicalStackHook)
	case boil.BeforeDeleteHook:
		technicalStackBeforeDeleteHooks = append(technicalStackBeforeDeleteHooks, technicalStackHook)
	case boil.AfterDeleteHook:
		technicalStackAfterDeleteHooks = append(technicalStackAfterDeleteHooks, technicalStackHook)
	case boil.BeforeUpsertHook:
		technicalStackBeforeUpsertHooks = append(technicalStackBeforeUpsertHooks, technicalStackHook)
	case boil.AfterUpsertHook:
		technicalStackAfterUpsertHooks = append(technicalStackAfterUpsertHooks, technicalStackHook)
	}
}

// One returns a single technicalStack record from the query.
func (q technicalStackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TechnicalStack, error) {
	o := &TechnicalStack{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for technical_stacks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TechnicalStack records from the query.
func (q technicalStackQuery) All(ctx context.Context, exec boil.ContextExecutor) (TechnicalStackSlice, error) {
	var o []*TechnicalStack

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TechnicalStack slice")
	}

	if len(technicalStackAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TechnicalStack records in the query.
func (q technicalStackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count technical_stacks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q technicalStackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if technical_stacks exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *TechnicalStack) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (technicalStackL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTechnicalStack interface{}, mods queries.Applicator) error {
	var slice []*TechnicalStack
	var object *TechnicalStack

	if singular {
		var ok bool
		object, ok = maybeTechnicalStack.(*TechnicalStack)
		if !ok {
			object = new(TechnicalStack)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTechnicalStack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTechnicalStack))
			}
		}
	} else {
		s, ok := maybeTechnicalStack.(*[]*TechnicalStack)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTechnicalStack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTechnicalStack))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &technicalStackR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &technicalStackR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.TechnicalStacks = append(foreign.R.TechnicalStacks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.TechnicalStacks = append(foreign.R.TechnicalStacks, local)
				break
			}
		}
	}

	return nil
}

// SetProduct of the technicalStack to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.TechnicalStacks.
func (o *TechnicalStack) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"technical_stacks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, technicalStackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &technicalStackR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			TechnicalStacks: TechnicalStackSlice{o},
		}
	} else {
		related.R.TechnicalStacks = append(related.R.TechnicalStacks, o)
	}

	return nil
}

// TechnicalStacks retrieves all the records using an executor.
func TechnicalStacks(mods ...qm.QueryMod) technicalStackQuery {
	mods = append(mods, qm.From("\"technical_stacks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"technical_stacks\".*"})
	}

	return technicalStackQuery{q}
}

// FindTechnicalStack retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTechnicalStack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TechnicalStack, error) {
	technicalStackObj := &TechnicalStack{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"technical_stacks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, technicalStackObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from technical_stacks")
	}

	if err = technicalStackObj.doAfterSelectHooks(ctx, exec); err != nil {
		return technicalStackObj, err
	}

	return technicalStackObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TechnicalStack) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no technical_stacks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(technicalStackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	technicalStackInsertCacheMut.RLock()
	cache, cached := technicalStackInsertCache[key]
	technicalStackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			technicalStackAllColumns,
			technicalStackColumnsWithDefault,
			technicalStackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(technicalStackType, technicalStackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(technicalStackType, technicalStackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"technical_stacks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"technical_stacks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into technical_stacks")
	}

	if !cached {
		technicalStackInsertCacheMut.Lock()
		technicalStackInsertCache[key] = cache
		technicalStackInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TechnicalStack.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TechnicalStack) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	technicalStackUpdateCacheMut.RLock()
	cache, cached := technicalStackUpdateCache[key]
	technicalStackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			technicalStackAllColumns,
			technicalStackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update technical_stacks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"technical_stacks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, technicalStackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(technicalStackType, technicalStackMapping, append(wl, technicalStackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update technical_stacks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for technical_stacks")
	}

	if !cached {
		technicalStackUpdateCacheMut.Lock()
		technicalStackUpdateCache[key] = cache
		technicalStackUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q technicalStackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for technical_stacks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for technical_stacks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TechnicalStackSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), technicalStackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"technical_stacks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, technicalStackPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in technicalStack slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all technicalStack")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TechnicalStack) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no technical_stacks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(technicalStackColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	technicalStackUpsertCacheMut.RLock()
	cache, cached := technicalStackUpsertCache[key]
	technicalStackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			technicalStackAllColumns,
			technicalStackColumnsWithDefault,
			technicalStackColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			technicalStackAllColumns,
			technicalStackPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert technical_stacks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(technicalStackPrimaryKeyColumns))
			copy(conflict, technicalStackPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"technical_stacks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(technicalStackType, technicalStackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(technicalStackType, technicalStackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert technical_stacks")
	}

	if !cached {
		technicalStackUpsertCacheMut.Lock()
		technicalStackUpsertCache[key] = cache
		technicalStackUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TechnicalStack record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TechnicalStack) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TechnicalStack provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), technicalStackPrimaryKeyMapping)
	sql := "DELETE FROM \"technical_stacks\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from technical_stacks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for technical_stacks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q technicalStackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no technicalStackQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from technical_stacks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for technical_stacks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TechnicalStackSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(technicalStackBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), technicalStackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"technical_stacks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, technicalStackPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from technicalStack slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for technical_stacks")
	}

	if len(technicalStackAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TechnicalStack) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTechnicalStack(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TechnicalStackSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TechnicalStackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), technicalStackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"technical_stacks\".* FROM \"technical_stacks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, technicalStackPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TechnicalStackSlice")
	}

	*o = slice

	return nil
}

// TechnicalStackExists checks if the TechnicalStack row exists.
func TechnicalStackExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"technical_stacks\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if technical_stacks exists")
	}

	return exists, nil
}

// Exists checks if the TechnicalStack row exists.
func (o *TechnicalStack) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TechnicalStackExists(ctx, exec, o.ID)
}
