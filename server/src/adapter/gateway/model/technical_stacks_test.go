// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTechnicalStacks(t *testing.T) {
	t.Parallel()

	query := TechnicalStacks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTechnicalStacksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTechnicalStacksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TechnicalStacks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTechnicalStacksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TechnicalStackSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTechnicalStacksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TechnicalStackExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TechnicalStack exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TechnicalStackExists to return true, but got false.")
	}
}

func testTechnicalStacksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	technicalStackFound, err := FindTechnicalStack(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if technicalStackFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTechnicalStacksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TechnicalStacks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTechnicalStacksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TechnicalStacks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTechnicalStacksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	technicalStackOne := &TechnicalStack{}
	technicalStackTwo := &TechnicalStack{}
	if err = randomize.Struct(seed, technicalStackOne, technicalStackDBTypes, false, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}
	if err = randomize.Struct(seed, technicalStackTwo, technicalStackDBTypes, false, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = technicalStackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = technicalStackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TechnicalStacks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTechnicalStacksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	technicalStackOne := &TechnicalStack{}
	technicalStackTwo := &TechnicalStack{}
	if err = randomize.Struct(seed, technicalStackOne, technicalStackDBTypes, false, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}
	if err = randomize.Struct(seed, technicalStackTwo, technicalStackDBTypes, false, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = technicalStackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = technicalStackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func technicalStackBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func technicalStackAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func technicalStackAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func technicalStackBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func technicalStackAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func technicalStackBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func technicalStackAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func technicalStackBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func technicalStackAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TechnicalStack) error {
	*o = TechnicalStack{}
	return nil
}

func testTechnicalStacksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TechnicalStack{}
	o := &TechnicalStack{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, technicalStackDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TechnicalStack object: %s", err)
	}

	AddTechnicalStackHook(boil.BeforeInsertHook, technicalStackBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	technicalStackBeforeInsertHooks = []TechnicalStackHook{}

	AddTechnicalStackHook(boil.AfterInsertHook, technicalStackAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	technicalStackAfterInsertHooks = []TechnicalStackHook{}

	AddTechnicalStackHook(boil.AfterSelectHook, technicalStackAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	technicalStackAfterSelectHooks = []TechnicalStackHook{}

	AddTechnicalStackHook(boil.BeforeUpdateHook, technicalStackBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	technicalStackBeforeUpdateHooks = []TechnicalStackHook{}

	AddTechnicalStackHook(boil.AfterUpdateHook, technicalStackAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	technicalStackAfterUpdateHooks = []TechnicalStackHook{}

	AddTechnicalStackHook(boil.BeforeDeleteHook, technicalStackBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	technicalStackBeforeDeleteHooks = []TechnicalStackHook{}

	AddTechnicalStackHook(boil.AfterDeleteHook, technicalStackAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	technicalStackAfterDeleteHooks = []TechnicalStackHook{}

	AddTechnicalStackHook(boil.BeforeUpsertHook, technicalStackBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	technicalStackBeforeUpsertHooks = []TechnicalStackHook{}

	AddTechnicalStackHook(boil.AfterUpsertHook, technicalStackAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	technicalStackAfterUpsertHooks = []TechnicalStackHook{}
}

func testTechnicalStacksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTechnicalStacksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(technicalStackColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTechnicalStackToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TechnicalStack
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, technicalStackDBTypes, false, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TechnicalStackSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*TechnicalStack)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTechnicalStackToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TechnicalStack
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, technicalStackDBTypes, false, strmangle.SetComplement(technicalStackPrimaryKeyColumns, technicalStackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TechnicalStacks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testTechnicalStacksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTechnicalStacksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TechnicalStackSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTechnicalStacksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TechnicalStacks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	technicalStackDBTypes = map[string]string{`ID`: `integer`, `ProductID`: `integer`, `TechnicalName`: `character varying`, `TechnicalType`: `character varying`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_                     = bytes.MinRead
)

func testTechnicalStacksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(technicalStackPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(technicalStackAllColumns) == len(technicalStackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTechnicalStacksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(technicalStackAllColumns) == len(technicalStackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TechnicalStack{}
	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, technicalStackDBTypes, true, technicalStackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(technicalStackAllColumns, technicalStackPrimaryKeyColumns) {
		fields = technicalStackAllColumns
	} else {
		fields = strmangle.SetComplement(
			technicalStackAllColumns,
			technicalStackPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TechnicalStackSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTechnicalStacksUpsert(t *testing.T) {
	t.Parallel()

	if len(technicalStackAllColumns) == len(technicalStackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TechnicalStack{}
	if err = randomize.Struct(seed, &o, technicalStackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TechnicalStack: %s", err)
	}

	count, err := TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, technicalStackDBTypes, false, technicalStackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TechnicalStack struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TechnicalStack: %s", err)
	}

	count, err = TechnicalStacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
